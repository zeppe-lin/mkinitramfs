# mkinitramfs.hooks.7.pod - mkinitramfs.hooks(7) manual page
# See COPYING and COPYRIGHT files for corresponding information.

=pod

=encoding UTF-8

=head1 NAME

mkinitramfs.hooks - mkinitramfs hooks and related stuff

=head1 DESCRIPTION

B<mkinitramfs> hooks provides a way to extend initramfs' build and
init process.  Hooks must be written in POSIX shell.  Bashisms and
other non-portable extensions are prohibited.

Hooks can be located in F</usr/share/mkinitramfs/hooks> (system path)
and F</etc/mkinitramfs/hooks> (user path).  It is also allowed to
specify custom location via L<mkinitramfs(8)>' B<-H> option.

In order to write hooks you must know about hook structure.  Example:

=begin man

  hooks/
  `-- <hook>/              -> directory of hook scripts
      |-- <hook>           -> invoked in build process
      |-- <hook>.init      -> invoked in init process
      `-- <hook>.init.late -> invoked after root filesystem was mounted

=end man

=begin html

  <pre>
  hooks/
  └── &lt;hook&gt;/              -> directory of hook scripts
      ├── &lt;hook&gt;           -> invoked in build process
      ├── &lt;hook&gt;.init      -> invoked in init process
      └── &lt;hook&gt;.init.late -> invoked after root filesystem was mounted
  </pre>

=end html

=head2 MAN PAGE SYNTAX

=over 8

=item B<B:>

Extension/Variable can be used in build process.

=item B<I:>

Extension/Variable can be used in init process.

=item B<BI:>

Extension/Variable can be used in both processes.

=back

=head1 EXTENSIONS

B<mkinitramfs> also provides some extensions and environment variables
to easily interact with build and init system.


=over 8

=item B<BI: info> I<MESSAGE>

Print message to stdout.

=item B<BI: panic> [I<MESSAGE>]

If message was not specified, then B<mkinitramfs> will print default
error message.  Otherwise, I<MESSAGE> will be printed.

=item B<B: copy_kmod> I<PATH>

Copy kernel module by I<PATH> (full path to kernel module) to
B<mkinitramfs> working directory.

=item B<B: copy_binary> I<NAME>|I<PATH>

If I<PATH> (full path to binary) was specified and it has executable
bit, then it will be copied to F</bin> location of B<mkinitramfs>
working directory.

If I<NAME> was specified, the B<mkinitramfs> will try to find command
by name in C<PATH>.  If success, command will be copied to F</bin>
location of B<mkinitramfs> working directory.  Otherwise error message
will appear.

=item B<B: copy_file> I<FILE> I<DEST> I<MODE> I<STRIP>

=over 8

=item I<FILE>

Must be full path to file.

=item I<DEST>

Must be full path where I<FILE> should be stored.  B<mkinitramfs> will
automatically create all leading directories if they aren't exist
already.  Also no need to prepend path of B<mkinitramfs> working
directory.

=item I<MODE>

Permissions in octal format.

=item I<STRIP>

If was set to B<1>, then B<mkinitramfs> will attempt to run
L<strip(1p)> on file.  B<mkinitramfs> will silently ignore errors if
strip doesn't exists or failed to strip binary.

=back

=item B<I: resolve_device> I<UUID>|I<LABEL>|I</dev/*>|I<PARTUUID>

Sets B<device> variable to full path of resolved
I<UUID>|I<LABEL>|I</dev/*>|I<PARTUUID>.

=back

=head1 VARIABLES

=over 8

=item B<BI: DEBUG>

1 if debug mode enabled.

=item B<I: break>

Breakpoint for debugging.

=item B<B: MKINITRAMFS_WORK_DIR>

Full path of B<mkinitramfs> working directory (initramfs rootfs in
future).

=item B<B: KERNEL_VERSION>

Kernel version.

=item B<B: KERNEL_MOD_DIR>

Kernel modules directory.

=item B<B: MKINITRAMFS_INIT>

Path to init script.

=item B<B: MKINITRAMFS_DEVHELPER>

Path to device-helper script.

=item B<B: MKINITRAMFS_CONF>

Config location.

=item B<B: MKINITRAMFS_IMAGE>

Output path where initramfs image is stored.

=item B<BI: ...>

See L<mkinitramfs.config(5)>.

=back

=head1 EXAMPLES

This example will show how to handle soft dependencies of B<ext4>
module.  Create F</etc/mkinitramfs/hooks/ext4> directory and copy
below scripts with appropriate names to that directory.  After that,
prepend B<ext4> to B<hooks> option in B<mkinitramfs>' config
(F</etc/mkinitramfs/config>).

I<ext4>

  print "Copying ext4 dependencies"

  for _mod in crc32c libcrc32c; do
      copy_kmod "$_mod"
  done

I<ext4.init>

  modprobe -a crc32c libcrc32c

=head1 SEE ALSO

L<mkinitramfs(8)>, L<mkinitramfs.config(5)>, L<mkinitramfs.cmdline(7)>

=cut

# vim:sw=2:ts=2:sts=2:et:cc=72:tw=70
# End of file.
