#!/bin/sh
# mkinitramfs - create an initial ramdisk environment
# See COPYING and COPYRIGHT files for corresponding information.

# https://www.shellcheck.net/wiki/SC2154
# shellcheck disable=2154

######################################################################
# Notification helpers.                                              #
######################################################################

# Print info message to stdout.
#  arg $1: message
info() {
  echo "=======> $1"
}

# Print error message to stderr and terminate the program.
#  arg $1: message
error() {
  echo "=======> ERROR: $1" >&2
  exit 1
}

######################################################################
# Command-line helpers.                                              #
######################################################################

print_help() {
  cat << EOF
Usage: mkinitramfs [OPTION]...
Create an initial ramdisk environment.

Mandatory arguments to long options are mandatory for short options too.
  -o, --output=FILE      set path to initramfs image
  -c, --config=FILE      set path to config
  -k, --kernel=VERSION   set kernel version
  -m, --modules=PATH     set path to modules
  -H, --hooks=PATH       set directory to hooks
  -D, --helper=FILE      set path to device helper
  -I, --init=FILE        set path to init script
  -d, --debug            enable debug mode
  -f, --force            overwrite initramfs image
  -v, --version          print version and exit
  -h, --help             print help and exit
EOF
}

print_version() {
  echo "mkinitramfs @VERSION@"
}

parse_options() {
  local _SOPTS="o:c:k:m:H:D:I:dfvh"
  local _LOPTS="output:,config:,kernel:,modules:,hooks:,helper:,init:,debug,force,version,help"

  eval set -- "$(getopt -n "mkinitramfs" -a -o "$_SOPTS" -l "$_LOPTS" -- "$@")"

  while true; do
    case $1 in
    -o| --output)  MKINITRAMFS_IMAGE="$2"     ; shift  ;;
    -c| --config)  MKINITRAMFS_CONF="$2"      ; shift  ;;
    -k| --kernel)  KERNEL_VERSION="$2"        ; shift  ;;
    -m|--modules)  KERNEL_MOD_DIR="$2"        ; shift  ;;
    -H|  --hooks)  MKINITRAMFS_HOOKS_DIR="$2" ; shift  ;;
    -D| --helper)  MKINITRAMFS_DEVHELPER="$2" ; shift  ;;
    -I|   --init)  MKINITRAMFS_INIT="$2"      ; shift  ;;
    -d|  --debug)  DEBUG="$1"                          ;;
    -f|  --force)  FORCE="$1"                          ;;
    -v|--version)  print_version              ; exit 0 ;;
    -h|   --help)  print_help                 ; exit 0 ;;
              --)  shift                      ; break  ;;
               *)  echo >&2 "internal error"  ; exit 1 ;;
    esac
    shift
  done

  # https://www.shellcheck.net/wiki/SC1090
  # shellcheck disable=1090
  . "${MKINITRAMFS_CONF:=/etc/mkinitramfs/config}"

  : "${KERNEL_VERSION:=$(uname -r)}"
  : "${KERNEL_MOD_DIR:=/lib/modules}"
  : "${MKINITRAMFS_INIT:=/usr/share/mkinitramfs/init}"
  : "${MKINITRAMFS_DEVHELPER:=/usr/share/mkinitramfs/device-helper}"
  : "${MKINITRAMFS_IMAGE:=${TMPDIR:-/tmp}/mkinitramfs-$KERNEL_VERSION}"

  mkdir -p "${MKINITRAMFS_WORK_DIR:=${TMPDIR:-/tmp}/mkinitramfs.$$}"

  # https://www.shellcheck.net/wiki/SC2015
  # shellcheck disable=2015
  [ "$DEBUG" = 1 ] && set -x || trap 'rm -rf $MKINITRAMFS_WORK_DIR' EXIT INT
}

prepare_initramfs() {
  info "Preparing initramfs"

  # https://wikipedia.org/wiki/Filesystem_Hierarchy_Standard
  mkdir -p                                  \
    "$MKINITRAMFS_WORK_DIR/dev"             \
    "$MKINITRAMFS_WORK_DIR/sys"             \
    "$MKINITRAMFS_WORK_DIR/tmp"             \
    "$MKINITRAMFS_WORK_DIR/run"             \
    "$MKINITRAMFS_WORK_DIR/var"             \
    "$MKINITRAMFS_WORK_DIR/proc"            \
    "$MKINITRAMFS_WORK_DIR/root"            \
    "$MKINITRAMFS_WORK_DIR/usr/lib"         \
    "$MKINITRAMFS_WORK_DIR/usr/bin"         \
    "$MKINITRAMFS_WORK_DIR/mnt/root"        \
    "$MKINITRAMFS_WORK_DIR/etc/mkinitramfs"

  ln -s usr/lib      "$MKINITRAMFS_WORK_DIR/usr/lib64"
  ln -s usr/lib      "$MKINITRAMFS_WORK_DIR/lib64"
  ln -s usr/lib      "$MKINITRAMFS_WORK_DIR/lib"
  ln -s usr/bin      "$MKINITRAMFS_WORK_DIR/bin"
  ln -s usr/bin      "$MKINITRAMFS_WORK_DIR/sbin"
  ln -s ../run       "$MKINITRAMFS_WORK_DIR/var/run"
  ln -s ../run/lock  "$MKINITRAMFS_WORK_DIR/var/lock"
  ln -s bin          "$MKINITRAMFS_WORK_DIR/usr/sbin"

  for _bin in \
    \[ sh ln env mkdir sleep mount printf switch_root \
    "$MKINITRAMFS_DEVHELPER"
  do
    copy_binary "$_bin"
  done

  command -v blkid >/dev/null && copy_binary blkid

  copy_file "$MKINITRAMFS_INIT" /init                   755 0
  copy_file "$MKINITRAMFS_CONF" /etc/mkinitramfs/config 644 0
}

copy_file() (
  _file="$1" _dest="$2" _mode="$3" _strip="$4"

  [ -e "$MKINITRAMFS_WORK_DIR/$_dest" ] && return 0

  mkdir -p "$MKINITRAMFS_WORK_DIR/${_dest%/*}" ||
    error "mkdir '$MKINITRAMFS_WORK_DIR/${_dest%/*}' failed"

  # Iterate through symlinks and copy them.
  while [ -h "$_file" ]; do
    cp -P "$_file" "$MKINITRAMFS_WORK_DIR/${_dest%/*}/${_file##*/}"
    cd -P "${_file%/*}"

    _symlink=$(ls -ld "$_file")
    _symlink="${_symlink##* -> }"

    # TODO handle ../../..
    case "$_symlink" in
    /*) _file="$_symlink"            ;;
     *) _file="$PWD/${_symlink##*/}" ;;
    esac
  done

  # Handle case when _file and _dest have same basenames
  [ -h "$MKINITRAMFS_WORK_DIR/$_dest" ] && _dest="$_file"

  {
    cp    "$_file" "$MKINITRAMFS_WORK_DIR/$_dest"
    chmod "$_mode" "$MKINITRAMFS_WORK_DIR/$_dest"
  } || error "cp & chmod $_mode '$MKINITRAMFS_WORK_DIR/$_dest' failed"

  # https://www.shellcheck.net/wiki/SC2015
  # shellcheck disable=2015
  [ "$_strip" = 1 ] && strip "$MKINITRAMFS_WORK_DIR/$_dest" >/dev/null 2>&1 || :
)

copy_binary() {
  binary=$(command -v "$1")

  # If output is
  #
  # empty, do panic
  # external command, do nothing
  # builtin command, try to find external alternative.
  #
  # https://www.shellcheck.net/wiki/SC2086
  # shellcheck disable=2086
  case "$binary" in
  */*)
    ;;
  "")
    error "$1 does not exist"
    ;;
  *)
    IFS=:; set -- $PATH; unset IFS

    _binary="$binary"

    for _dir; do
      binary="${_dir}/${_binary}"

      [ -x "$binary" ] && break
    done || error "$_binary does not exist"
    ;;
  esac

  copy_file "$binary" "/bin/${binary##*/}" 755 1

  # Skip copying binary dependencies if ldd not available.
  command -v ldd >/dev/null || return 0

  # Copy binary dependencies if any exist.
  ldd "$binary" 2>/dev/null | while read -r _lib || [ "$_lib" ]; do
    _lib="${_lib#* => }"
    _lib="${_lib% *}"

    [ -e "$_lib" ] && copy_file "$_lib" "/lib/${_lib##*/}" 755 1
  done
}

copy_module() {
  # arg $1: module name
  modprobe -S "$KERNEL_VERSION" -D "$1" 2>/dev/null |
    while read -r _typ _mod _param || [ "$_mod" ]; do
      #[ "$_typ" = "builtin" ] || copy_file "$_mod" "$_mod" 0644 0
      case $_mod in /*) copy_file "$_mod" "$_mod" 0644 0; esac
    done
}

copy_hook() {
  # arg $1: hook

  for _hookdir in "$MKINITRAMFS_HOOKS_DIR" \
    /etc/mkinitramfs/hooks /usr/share/mkinitramfs/hooks
  do
      [ -f "$_hookdir/$1/$1" ] && break
  done || error "could not find $1 hook"

  print "running $1 hook"

  # https://www.shellcheck.net/wiki/SC1090
  # shellcheck disable=1090
  . "$_hookdir/$1/$1"

  for _hooktyp in init init.late; do
    [ -f "$_hookdir/$1/$1.$_hooktyp" ] || continue

    print "copying $1.$_hooktyp"

    copy_file "$_hookdir/$1/$1.$_hooktyp" \
      "/usr/share/mkinitramfs/hooks/$1/$1.$_hooktyp" 644 0
  done
}

copy_modules() {
  # Skip this function if kernel compiled with builtin modules.
  if [ "$monolith" = 1 ]; then
    return 0

  elif [ "$hostonly" = 1 ]; then
    print "copying hostonly modules"

    # Perform autodetection of modules via /sys
    # https://wiki.archlinux.org/index.php/Modalias
    find /sys/devices -name modalias -exec sort -u {} + |
      while read -r _mod || [ "$_mod" ]; do
        # Skip unneeded modules and skip modules which depends on
        # them as well.
        case $(modprobe -S "$KERNEL_VERSION" -D "$_mod") in
        *wmi*|*gpu*|*net*) continue ;;
        esac 2>/dev/null

        copy_module "$_mod"
      done

    if [ "$root_type" ]; then
      copy_module "$root_type"
    else
      while read -r _ _dir _type _; do
        [ "$_dir" = / ] && break
      done < /proc/mounts || error "failed to autodetect root fs module"

      copy_module "$_type"
    fi

  else
    print "copying all modules"

    find \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/fs"                   \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/lib"                  \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/arch"                 \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/crypto"               \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/md"           \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/ata"          \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/scsi"         \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/block"        \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/virtio"       \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/usb/host"     \
      "$KERNEL_MOD_DIR/$KERNEL_VERSION/kernel/drivers/usb/storage"  \
      -type f 2>/dev/null |
        while read -r _mod || [ "$_mod" ]; do
          # Intentional.
          # shellcheck disable=2295
          copy_file "$_mod" "/lib/modules/${_mod#$KERNEL_MOD_DIR}" 644 0
        done
  fi

  copy_binary modprobe

  copy_file "$KERNEL_MOD_DIR/$KERNEL_VERSION/modules.order" \
    "/lib/modules/$KERNEL_VERSION/modules.order" 644 0

  copy_file "$KERNEL_MOD_DIR/$KERNEL_VERSION/modules.builtin" \
    "/lib/modules/$KERNEL_VERSION/modules.builtin" 644 0

  copy_file "$KERNEL_MOD_DIR/$KERNEL_VERSION/modules.builtin.modinfo" \
    "/lib/modules/$KERNEL_VERSION/modules.builtin.modinfo" 644 0

  print "copying local /etc/modprobe.d config files"
  find /etc/modprobe.d/ -type f -name "*.conf" |
    while read -r _cfg; do
      copy_file "$_cfg" "$_cfg" 0644
    done

  depmod -b "$MKINITRAMFS_WORK_DIR" "$KERNEL_VERSION"
}

make_initramfs() (
  info "Generating initramfs image"

  [ "$FORCE" != 1 ] && [ -e "$MKINITRAMFS_IMAGE" ] &&
    error "initramfs image already exist"

  cd "$MKINITRAMFS_WORK_DIR"
  find . | cpio -oH newc 2>/dev/null | ${compress:-cat} \
    >"$MKINITRAMFS_IMAGE" ||
    error "failed to generate initramfs image"

  info "Done! Check out $MKINITRAMFS_IMAGE"
)

# -e: Exit if command return status greater than 0
# -f: Disable globbing *?[]
set -ef

parse_options "$@"
prepare_initramfs

for _hook in $hooks; do
  copy_hook "$_hook"
done

copy_modules
make_initramfs

# vim:sw=2:ts=2:sts=2:et:cc=72:tw=70
# End of file.
